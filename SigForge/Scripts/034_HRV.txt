SimulateModulatedECG(sim1, 240000, 1000,
{
    "heartbeat_frequency" : 1.0,
    "alteration_frequency_for_DC_component" : 0.01,
    "alteration_amplitude_for_DC_component" : 0.2,
    "amplitude_modulation_depth_for_QRS_by_HF" : 0.2,
    "frequency_HF" : 0.2,
    "frequency_LF" : 0.1,
    "frequency_modulation_depth_HF" : 0.3,
    "frequency_modulation_depth_LF" : 0.3,
    "phase_HF_radians" : 0,
    "phase_LF_radians" : 0,
    "phase_baseline_radians": 0,
    "extrasys_frequency" : 0.1,
    "extrasys_shift_after_last_QRS" : 0.5,
    "QRS_interval_standard_deviation" : 0.1,
    "skip_one_QRS_after" : 7
},
{
    "amplitude_p" : 0.1,
    "amplitude_q" : -0.1,
    "amplitude_r" : 1.0,
    "amplitude_s" : -0.2,
    "amplitude_t" : 0.2,
    "len_p" : 0.08,
    "len_pq" : 0.08,
    "len_q" : 0.007,
    "len_r" : 0.1,
    "len_s" : 0.007,
    "len_st" : 0.1,
    "len_t" : 0.16
});
DisplayData(sim1);

// --------------------------------------------

#define SAMPLING_RATE 2000

DataIn(sim1, orig_sig_1, 1);
DataDelete();

CreateFilter(bandpass_filter2, butterworth bp, 2 SAMPLING_RATE, 0.7 500);
Filter(orig_sig_1, bandpass_filter2);
FilterReverse(orig_sig_1, bandpass_filter2);

CreateFilter(bandstop_filter2, butterworth bs, 2 SAMPLING_RATE, 49.9 50.1);
Filter(orig_sig_1, bandstop_filter2);
FilterReverse(orig_sig_1, bandstop_filter2);

Copy(mother_sig1, orig_sig_1, 0);
Copy(mother_sig2, orig_sig_1, 0);

def SpikeDetector(ekgsignal, spikes, spike_radius, density_threshold, bo_low, bo_high, details)
{
    CreateFilter(bandpass_filter, butterworth bp, 2 SAMPLING_RATE, bo_low bo_high);
    CreateFilter(derivative_filter, butterworth hp, 2 SAMPLING_RATE, 10);
    CreateFilter(integrative_filter, butterworth lp, 2 SAMPLING_RATE, 8);
    CreateFilter(threshold_filter, butterworth lp, 2 SAMPLING_RATE, 1.5);
    Filter(ekgsignal, bandpass_filter);
    FilterReverse(ekgsignal, bandpass_filter);
    Filter(ekgsignal, derivative_filter);
    FilterReverse(ekgsignal, derivative_filter);
    SQR_Inplace(ekgsignal);
    Filter(ekgsignal, integrative_filter);
    FilterReverse(ekgsignal, integrative_filter);
    Copy(ekgsignal_threshold, ekgsignal);
    Filter(ekgsignal_threshold, threshold_filter);
    FilterReverse(ekgsignal_threshold, threshold_filter);
    DetectSpikes(spikes, ekgsignal, ekgsignal_threshold);
    CleanupSpikes(ekgsignal, spikes, spike_radius, density_threshold);
    if (details)
    {
        Cat(ekgsignal_threshold, ekgsignal);
        Cat(ekgsignal_threshold, spikes);
        DisplayData(ekgsignal_threshold, fit_width,, C, 001);
    };
};

SpikeDetector(mother_sig1, maternal_spikes, 0.3, 0.5, 8, 20, true);
RefineSpikes(mother_sig2, maternal_spikes, 0.3);

Cat(mother_sig2, maternal_spikes);

DisplayData(mother_sig2, fit_width,, C, 001);
DisplayData(manage_windows, tile_vertically);

// ----------------------

DataIn(mother_sig2, spikes, 2);
RR_Distances(spikes, RRs, 0);
ARSpectrum(RRs, ar_spectrum, 16, 4, 256);
ResampleNNIntervals(RRs, RRsResampled, 10);
RemoveDCComponent(RRsResampled);
MeanSpectrum(RRsResampled, spectra, 200, 512);

Transpose(RRs_transposed, RRs);
WriteAscii(RRs_transposed, c:/tamas/RRs3.ascii);
DisplayData(RRs);
DisplayData(RRsResampled);
DisplayData(spectra);
DisplayData(ar_spectrum);

//--------------------

SimulateModulatedECG(...);
Cat(sim1, sim1);
Cat(sim1, sim1);
Cat(sim1, sim1);
Cat(sim1, sim1);
DisplayData(sim1);
SaveDataToFile(sim1, c:\Tamas\PSAA\Development\Test\Data\3CH\2021-03-15\BB\sim1.raw, 100, 10);
SaveDataToFile(sim1, c:\Tamas\PSAA\Development\Test\Data\3CH\2021-03-15\BB\sim_6_30s_Hz_0.3Hz_0.10Hz_0.014Hz.raw, 100, 10);
