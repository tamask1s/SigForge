DataDelete();

FileOpen(d:\tamas\PSAA\Development\Applications\SigForge\SigForge\App\FileName04_1000.bdf, ekgsignaldata);
DataIn(ekgsignaldata, orig_sig_1);

def SpikeDetector(ekgsignal, spikes, spike_radius, density_threshold)
{
    CreateFilter(bandpass_filter, butterworth bp, 2 1000, 5 20);
    CreateFilter(derivative_filter, butterworth hp, 2 1000, 10);
    CreateFilter(integrative_filter, butterworth lp, 2 1000, 8);
    CreateFilter(threshold_filter, butterworth lp, 2 1000, 1.5);

    Filter(ekgsignal, bandpass_filter);
    FilterReverse(ekgsignal, bandpass_filter);
    Filter(ekgsignal, derivative_filter);
    FilterReverse(ekgsignal, derivative_filter);
    SQR_Inplace(ekgsignal);
    Filter(ekgsignal, integrative_filter);
    FilterReverse(ekgsignal, integrative_filter);
    Copy(ekgsignal_threshold, ekgsignal);
    Filter(ekgsignal_threshold, threshold_filter);
    FilterReverse(ekgsignal_threshold, threshold_filter);
    DetectSpikes(spikes, ekgsignal, ekgsignal_threshold);
    CleanupSpikes(ekgsignal, spikes, spike_radius, density_threshold);
};

SpikeDetector(orig_sig_1, spike_signal, 0.3, 4.0);

DataIn(ekgsignaldata, ekgsignal_orig);

CreateFilter(bandpass_filter2, butterworth bp, 2 1000, 5 90);
Filter(ekgsignal_orig, bandpass_filter2);
FilterReverse(ekgsignal_orig, bandpass_filter2);

//RefineSpikes(ekgsignal_orig, spike_signal, 0.3);
CleanupSignal_Spike(ekgsignal_orig, spike_signal, 0.17, EKGAVG);
Copy(ekgsignal_fetal, ekgsignal_orig);


SpikeDetector(ekgsignal_orig, spike_signal, 0.3, 4.0);

CleanupSignal_Spike(ekgsignal_fetal, spike_signal, 0.17, EKGAVG);

Cat(orig_sig_1, ekgsignal_threshold);
Cat(orig_sig_1, ekgsignal_fetal);
Cat(ekgsignal_orig, spike_signal);

DisplayData(orig_sig_1);
DisplayData(spike_signal);
DisplayData(ekgsignal_orig);
DisplayData(EKGAVG);